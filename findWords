 
    // a one dim array with word spliced
    findWords() {
 



        //add one charatcer to nested array
        //if on last block than movve the character down one row
        //if characters are therw (including space) and below than increment all those elements
        //consider words so they don't wrap



        
        let startWordX =-1;
        let endWordX = 0;
        let x = 0;


        let z = 0;
        wordArray = [' '];



        let rowCounter = 0;

        let spaceCountr = 0;
        let XEndOfWord = -1;
        let XStartOfWord = -1;
        let isntInThnisRow = false;

        //Find if word is on same row
        for (x = WIDTH; x > 0; x--) {
            

            if (oneDimArray[x] == ' ' && rowCounter == -1) {
                
                endWordX = x;
                isntInThnisRow = false;
                XEndOfWord = x;
                rowCounter = 1;
               
            }


            if (oneDimArray[x] == ' ' && rowCounter == 1) {


                startWordX = x;
                isntInThnisRow = true;
                XStartOfWord = x;
                startWordX = 1;
                break;
                
            }


            
        }



        //find XEndOfWork




            
            //is no start, just end.
            //end is now start
        if (isntInThnisRow) {
                
            startWordX = XEndOfWord;
            XEndOfWord = -1;

                

        
        
                //only when there isn't an end found yet, get first space and break
        
            
                for (let i = 0; i < WIDTH * HEIGHT; i++) {
            
                    if (oneDimArray == ' ') {
                        XEndOfWord = i;
                        break;
                    }
                }
           


        
        
            lengthOfWord = endWordX - startWordX;
        
            wordArray[0] = ' ';
        
            //creates an array of the word to be moved to next row
            
                for (let i = 1; i < lengthOfWord; i++) {
                    //avoid first space in word
                    wordArray[i] == oneDimArray[startWordX + i-1];
                    z++
                }
           

            //the word is now :  " word-here "
            wordArray[z] = ' ';
   
        

            z = 0;

        

        
            // on two lines
            //splices blanks from word to end of row
            for (let i = startWordX; i < width; i++) {
                oneDimArray.splice(i, 0, ' ')
                
            }
        

            //splice word on next row
            for (let i = rowCounter+ 1; i < lengthOfWord; i++) {
                oneDimArray.splice(i, 0, wordArray[i]);
          }
          

          let wrappingWord = false;
          //next line has word wrapping from top to bottom
          if (oneDimArray[WIDTH] != " " && oneDimArray[WIDTH] != "" && 
            oneDimArray[WIDTH-1] != " " && oneDimArray[WIDTH] != "" && 
            oneDimArray[WIDTH] != " " && oneDimArray[WIDTH] != ""  )
          {
            wrappingWord = true;
            
          }

          let wordStartsAtIndex = 0;
          let wordEndsAtIndex = 0;
          
          
          
          if (wrappingWord == true) {


            //find last space in row
            for (let i = WIDTH * rowCounter + 1; i > (WIDTH * rowCounter - WIDTH); i--) {
              if (oneDimArray[i] == " ") {
                wordStartsAtIndex = i;

              }
            }
            //look at next row for end of word that starts on previous row and ends here on next
            for (let i = WIDTH * rowCounter + 2; i < WIDTH; i++) {
              if (oneDimArray[i] == " ") {
                wordEndsAtIndex = i;
              }
            }

            let lengthOfWord = wordEndsAtIndex - wordStartsAtIndex;


            // on two lines
            //splices blanks from word to end of row
            for (let i = wordStartsAtIndex; i < width; i++) {
              oneDimArray.splice(i, 0, ' ')
              
            }

            //CHANGE THIS AFTER TESING, TEST DISPLAY WORDS ON LINE
            //SPLICES WORD ON A LINE EIGHT ROWS UNDER INSERT
            for (let i = rowCounter + 2; i < lengthOfWord; i++) {
              oneDimArray.splice(i, 0, wordArray[i]);
            }
          }

          makeTwoDimArray()


          rowcounter++;
        
        }
        
